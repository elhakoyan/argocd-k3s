# SelfSigned issuers are useful for creating root certificates
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: selfsigned
spec:
  selfSigned: {}
---
# Request a self-signed certificate from our Issuer; this will function as our
# issuing root certificate when we pass it into a CA Issuer.

# It's generally fine to issue root certificates like this one with long lifespans;
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: nginx-ca
  namespace: cert-manager
spec:
  isCA: true
  duration: 87600h0m0s # 10 years
  secretName: nginx-ca
  commonName: "example.org"
  privateKey:
    algorithm: ECDSA
    size: 256
  subject:
    organizations:
    - "example.org"
    - "*.example.org"
  issuerRef:
    name: selfsigned
    kind: ClusterIssuer
    group: cert-manager.io
  secretTemplate:
    annotations:
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "sonarqube"  # Control destination namespaces
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true" # Auto create reflection for matching namespaces
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "sonarqube"
---
# Create a CA issuer using our root
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: nginx-ca
spec:
  ca:
    secretName: nginx-ca

---

apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: gitlab-minio-cert
  namespace: gitlab
spec:
  # isCA: false
  duration: 87600h0m0s # 10 years
  secretName: gitlab-minio-cert
  commonName: "minio"
  privateKey:
    algorithm: ECDSA
    size: 256
  subject:
    organizations:
    - "minio.gitlab"
  issuerRef:
    name: selfsigned
    kind: ClusterIssuer
    group: cert-manager.io