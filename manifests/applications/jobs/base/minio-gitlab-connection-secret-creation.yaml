apiVersion: v1
kind: ServiceAccount
metadata:
  name: secret-creator
  namespace: gitlab
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: secret-creator-role
  namespace: gitlab
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "watch", "list", "create", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-creator-rolebinding
  namespace: gitlab
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-creator-role
subjects:
- kind: ServiceAccount
  name: secret-creator
---
apiVersion: batch/v1
kind: Job
metadata:
  generateName: create-secret-
  namespace: gitlab
  annotations:
    argocd.argoproj.io/hook: PreSync
    argocd.argoproj.io/hook-delete-policy: HookSucceeded
spec:
  template:
    spec:
      serviceAccountName: secret-creator
      containers:
        - name: create-secret
          image: bitnami/kubectl:1.26.5
          command: ["/bin/sh"]
          args: 
          - "-c" 
          - | 
            echo "Start"
            cat <<EOF >> /tmp/rails.yaml
            provider: AWS
            region: us-east-1
            # Specify access/secret keys
            aws_access_key_id: $(kubectl get secret -n gitlab gitlab-minio-secret -o jsonpath="{.data.accesskey}" | base64 --decode)
            aws_secret_access_key: $(kubectl get secret -n gitlab gitlab-minio-secret -o jsonpath="{.data.secretkey}" | base64 --decode)
            aws_signature_version: 4
            host: minio.gitlab
            endpoint: "https://minio.gitlab:9000"
            path_style: true
            EOF
            cat /tmp/rails.yaml
            kubectl create secret generic -n gitlab minio-connection-rails --from-file=/tmp/rails.yaml
      restartPolicy: Never
  backoffLimit: 2